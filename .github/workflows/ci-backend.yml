name: Backend CI Pipeline

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'integration'
  pull_request:
    types: [opened,synchronize, reopened, edited]
    branches:
      - 'main'
    paths:
      - '.github/workflows/ci-backend.yml'
      - 'backend/**'
      - '!backend/*.md'
env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  IMAGE_TAG_1: latest     
jobs:
  build-and-test:
    defaults:
      run:
        shell: bash
        working-directory: backend
    name: Build and Test
    if: github.base_ref == 'main' && github.head_ref == 'integration'
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: changethis123
          POSTGRES_DB: app
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
          
      - name: Copy env file
        run: |
          cp .env.sample .env

      - name: Run app
        run: |
          poetry run bash ./prestart.sh
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      - name: Run tests
        run: |
          poetry run pytest | tee /dev/null


  build-push-image:
    name: Build and Push Image
    if: github.base_ref == 'main' && github.head_ref == 'integration'
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set tags as environment variables
        env:
          REPO_NAME: "${GITHUB_REPOSITORY#*/}" # Extract the repository name from the full repository name
        run: |
          echo "IMAGE_NAME=ghcr.io/${REPO_NAME}/backend" >> $GITHUB_ENV
          echo "IMAGE_TAG_2=${{ github.run_number }}-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:backend"
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_1 }}, ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_2 }}


  update-deployment:
    name: Update Deployment File
    runs-on: ubuntu-latest
    needs: build-push-image
    if: github.base_ref == 'main' && github.head_ref == 'integration'
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set environment variables
        env:
          REPO_NAME: "${GITHUB_REPOSITORY#*/}" # Extract the repository name from the full repository name
        run: |
          echo "IMAGE_NAME=ghcr.io/${REPO_NAME}/backend" >> $GITHUB_ENV
          echo "IMAGE_TAG_2=${{ github.run_number }}-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Update Deployment YAML
        run: |
          sed -i "s|image: ${{ env.IMAGE_NAME }}:.*|image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_2 }}|" compose.yml
      
      - name: Set Git user email and name
        run: |
          GIT_ACTOR_EMAIL="${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          echo "Setting Git user.email to: $GIT_ACTOR_EMAIL"
          git config --global user.email "$GIT_ACTOR_EMAIL"
          git config --global user.name "${{ github.actor }}"
          echo "Git configuration set successfully."

      - name: Commit and Push Changes
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          git add compose.yml
          git commit -m "Update Docker Image Tag to ${{ env.IMAGE_TAG_2 }}"
          git pull --rebase origin $BRANCH_NAME
          git push origin $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}